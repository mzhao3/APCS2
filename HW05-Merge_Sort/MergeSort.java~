// Maggie Zhao
// APCS2 pd1
// HW05-- Step 1: Split, Step 2: ?, Step 3: Sorted!. . .
// 2018-02-06

/*======================================
  class MergeSort
  Implements mergesort on array of ints.

  Summary of Algorithm:
  The given array is split by halves until every number in the original array is the sole element in its own array list. Then, the resulting sorted lists can be merged (since single elements are always sorted) repeatedly, until the original array has been fully sorted. 

  ======================================*/

public class MergeSort
{
  /******************************************************
   * int[] merge(int[],int[])
   * Merges two input arrays
   * Precond:  Input arrays are sorted in ascending order
   * Postcond: Input arrays unchanged, and
   * output array sorted in ascending order.
   ******************************************************/
  private static int[] merge( int[] a, int[] b )
    {
	int[] ret = new int[a.length + b.length];
	int acounter = 0, bcounter = 0, x = 0;
	int min = Math.min(a.length, b.length);

	while (acounter <  a.length &&  bcounter <  b.length) {
	    //System.out.println(acounter + " " + a[acounter]);
	    //System.out.println(bcounter + " " + b[bcounter]);
	    if (a[acounter] < b[bcounter]) {
		ret[x] = a[acounter];
		acounter ++;
		x ++;
		//System.out.print("a");
	    }
	    else {
		ret[x] = b[bcounter];
		bcounter ++;
		x ++;
		//System.out.print("b");

	    }
	}
	// copies remaining elements in b into ret
	if (bcounter < b.length) {
	    for (int y = bcounter; y < b.length; y++) {
		//System.out.println("B " + b[y]);
		ret[x] = b[y];
		x++;
	    }
	}
	// copies remaining elements in a into ret
	else {
	    for (int z = acounter; z < a.length; z++) {
		//System.out.println("A " + a[z]);
                ret[x] = a[z];
                x++;
            }
        }
	return ret;
	
  }//end merge()


  /******************************************************
   * int[] sort(int[])
   * Sorts input array using mergesort algorithm
   * Returns sorted version of input array (ascending)
   ******************************************************/
  public static int[] sort( int[] arr )
  {
      // do not divide further if the array only has one number
      if (arr.length == 1) return arr;
      else {
	  // copies the first half of the array into a new array
	  int half = arr.length / 2;
	  int[] a = new int[half];
	  for ( int x = 0; x < half; x ++ ) a[x] = arr[x];
	  //printArray(a);

	  // copies the second half of the array into a new array
	  int y = 0;
	  int[] b = new int[arr.length - half];
	  for ( int x = half; x < arr.length; x++) {
	      b[y] = arr[x];
	      y ++;
	  }
	  //printArray(b);

	  // sort the first half
	  a = sort(a);
	  // sort the second half
	  b = sort(b);

	  // merge the two halves after they have been sorted
	  arr = merge (a,b);
	  //printArray(arr);
	  return arr;
      }

  }//end sort()



  //-------------------HELPERS-------------------------
  //tester function for exploring how arrays are passed
  //usage: print array, mess(array), print array. Whaddayasee?
  public static void mess( int[] a ) {
    for( int i = 0 ; i<a.length; i++ )
      a[i] = 0;
  }

  //helper method for displaying an array
  public static void printArray( int[] a ) {
    System.out.print("[");
    for( int i : a )
      System.out.print( i + ",");
    System.out.println("]");
  }
  //---------------------------------------------------


  //main method for testing
  public static void main( String [] args ) {

    
      int[] arr0 = {0};
      
      int[] arr1 = {1};
      int[] arr2 = {1,2};
      int[] arr3 = {3,4};
      int[] arr4 = {1,2,3,4};
      int[] arr5 = {4,3,2,1};
      int[] arr6 = {9,42,17,63,0,512,23};
      int[] arr7 = {9,42,17,63,0,9,512,23,9};
      System.out.println("\nTesting mess-with-array method...");
      printArray( arr3 );
      //mess(arr3);
      printArray( merge (arr1 , arr1 ) );
      
      System.out.println("\nMerging arr1 and arr0: ");
      printArray( merge(arr1,arr0) );

      System.out.println("\nMerging arr4 and arr2: ");
      printArray( merge(arr4, arr2) );

      System.out.println("\nSorting arr4-7...");
      printArray( sort( arr4 ) );
      printArray( sort( arr5 ) );
      printArray( sort( arr6 ) );
      printArray( sort( arr7 ) );
/*~~~~~~~~~~~~~~ Ye Olde Tester Bar ~~~~~~~~~~~~~~
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  }//end main()

}//end class MergeSort
